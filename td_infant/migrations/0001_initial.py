# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-10-19 14:58
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_extensions.db.fields
import django_revision.revision_field
import edc_base.model.fields.custom_fields
import edc_base.model.fields.hostname_modification_field
import edc_base.model.fields.userfield
import edc_base.model.fields.uuid_auto_field
import edc_base.model.validators.date
import edc_offstudy.model_mixins
import edc_protocol.validators
import edc_sync.models.sync_model_mixin


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('td_list', '__first__'),
        ('edc_death_report', '0002_auto_20161004_1807'),
        ('td_appointment', '__first__'),
        ('td_registration', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalInfantArvProphMod',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('arv_code', models.CharField(choices=[('Nevirapine', 'NVP'), ('Kaletra', 'KAL'), ('Aluvia', 'ALU'), ('Truvada', 'TRV'), ('Tenoforvir', 'TDF'), ('Zidovudine', 'AZT'), ('Lamivudine', '3TC'), ('Efavirenz', 'EFV'), ('Didanosine', 'DDI'), ('Stavudine', 'D4T'), ('Nelfinavir', 'NFV'), ('Abacavir', 'ABC'), ('Combivir', 'CBV'), ('Ritonavir', 'RTV'), ('Trizivir', 'TZV'), ('Raltegravir', 'RAL'), ('Saquinavir,soft gel capsule', 'FOR'), ('Saquinavir,hard capsule', 'INV'), ('Kaletra or Aluvia', 'KAL or ALU'), ('Atripla', 'ATR'), ('HAART,unknown', 'HAART,unknown')], max_length=25, verbose_name='ARV Code')),
                ('dose_status', models.CharField(choices=[('New', 'New'), ('Permanently discontinued', 'Permanently discontinued'), ('Temporarily held', 'Temporarily held'), ('Dose modified', 'Dose modified'), ('Resumed', 'Resumed'), ('Not initiated', 'Not initiated')], max_length=25, verbose_name='Dose Status')),
                ('modification_date', models.DateField(verbose_name='Date ARV Modified')),
                ('modification_code', models.CharField(choices=[('Initial dose', 'Initial dose'), ('Never started', 'Never started'), ('Toxicity decreased_resolved', 'Toxicity decreased/resolved'), ('Completed PMTCT intervention', 'Completed PMTCT intervention'), ('Completed postpartum tail', 'Completed postpartum "tail"'), ('Scheduled dose increase', 'Scheduled dose increase'), ('Confirmed infant HIV infection, ending study drug', 'Confirmed infant HIV infection, ending study drug'), ('completed protocol', 'Completion of protocol-required period of study treatment'), ('HAART not available', 'HAART not available'), ('Anemia', 'Anemia'), ('Bleeding', 'Bleeding'), ('CNS symptoms', 'CNS symptoms (sleep, psych, etc)'), ('Diarrhea', 'Diarrhea'), ('Fatigue', 'Fatigue'), ('Headache', 'Headache'), ('Hepatotoxicity', 'Hepatotoxicity'), ('Nausea', 'Nausea'), ('Neutropenia', 'Neutropenia'), ('Thrombocytopenia', 'Thrombocytopenia'), ('Vomiting', 'Vomiting'), ('Rash', 'Rash'), ('Rash resolved', 'Rash resolved'), ('Neuropathy', 'Neuropathy'), ('Hypersensitivity_allergic reaction', 'Hypersensitivity / allergic reaction'), ('Pancreatitis', 'Pancreatitis'), ('Lactic Acidiosis', 'Lactic Acidiosis'), ('Pancytopenia', 'Pancytopenia'), ('Virologic failure', 'Virologic failure'), ('Immunologic failure', 'Immunologic failure(CD4)'), ('Clinical failure', 'Clinical failure'), ('Clinician request', 'Clinician request, other reason (including convenience)'), ('Subject request', 'Subject request, other reason (including convenience)'), ('Non-adherence with clinic visits', 'Non-adherence with clinic visits'), ('Non-adherence with ARVs', 'Non-adherence with ARVs'), ('Death', 'Death'), ('OTHER', 'Other')], max_length=50, verbose_name='Reason for Modification')),
                ('other_reason', models.CharField(blank=True, max_length=100, null=True, verbose_name='Specify Other')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical Infant NVP or AZT Proph: Mods',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalInfantBirth',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Date and Time infant enrolled')),
                ('first_name', models.CharField(help_text="If infant name is unknown or not yet determined, use Baby + birth order + mother's last name, e.g. 'Baby1Malane'", max_length=25, verbose_name="Infant's first name")),
                ('initials', models.CharField(max_length=3)),
                ('dob', models.DateField(help_text='Must match labour and delivery report.', validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date of Birth')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=10)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical Infant Birth',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalInfantFuDxItems',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('fu_dx', models.CharField(choices=[('Poor weight gain or failure to thrive', 'Poor weight gain or failure to thrive'), ('Severe diarrhea or gastroenteritis', 'Severe diarrhea or gastroenteritis'), ('Pneumonia, suspected (no CXR or microbiologic confirmation)', 'Pneumonia, suspected (no CXR or microbiologic confirmation)'), ('Pneumonia, CXR confirmed, no bacterial pathogen', 'Pneumonia, CXR confirmed, no bacterial pathogen'), ('Pneumonia, CXR confirmed, bacterial pathogen isolated (specify pathogen)', 'Pneumonia, CXR confirmed, bacterial pathogen isolated (specify pathogen)'), ('Pulmonary TB, suspected(no CXR or microbiologic confirmation)', 'Pulmonary TB, suspected(no CXR or microbiologic confirmation)'), ('Pulmonary TB, CXR-confirmed (no microbiologic confirmation)', 'Pulmonary TB, CXR-confirmed (no microbiologic confirmation)'), ('Pulmonary TB, smear and/or culture positive', 'Pulmonary TB, smear and/or culture positive'), ('Extrapulmonary TB,suspected (no CXR or microbiologic confirmation)', 'Extrapulmonary TB,suspected (no CXR or microbiologic confirmation)'), ('Bronchiolitis (not bronchitis)', 'Bronchiolitis (not bronchitis)'), ('Hepatitis:Drug related', 'Hepatitis:Drug related (report for Grades 2,3,4)'), ('Hepatitis:Traditional medication related', 'Hepatitis:Traditional medication related'), ('Hepatitis:Hepatitis A', 'Hepatitis:Hepatitis A'), ('Hepatitis:Hepatitis B', 'Hepatitis:Hepatitis B'), ('Hepatitis:Other/Unknown', 'Hepatitis:Other/Unknown'), ('Sepsis,unspecified', 'Sepsis,unspecified'), ('Sepsis,pathogen specified', 'Sepsis,pathogen specified'), ('Meningitis,unspecified', 'Meningitis,unspecified'), ('Meningitis pathogen specified', 'Meningitis pathogen specified'), ('Otitis media', 'Otitis media'), ('Appendicitis', 'Appendicitis'), ('Cholecystitis/cholanangitis', 'Cholecystitis/cholanangitis'), ('Pancreatitis', 'Pancreatitis'), ('Acute Renal Failure', 'Acute Renal Failure (Record highest creatinine level if creatine tested outside of the study) '), ('Anemia', 'Anemia(Only report grade 3 or 4 anemia based on a lab value drawn outside the study'), ('Rash', 'Rash (report for Grades 2,3,4)'), ('Trauma/accident', 'Trauma/accident'), ('Other abnormallaboratory tests(other than tests listed above or tests done as part of this study), specify test and result', 'Other abnormallaboratory tests(other than tests listed above or tests done as part of this study),specify test and result'), ('New congenital abnormality not previously identified?,specify', 'New congenital abnormality not previously identified?,specify and complete "Congenital Anomaly"form'), ('Other serious (grade 3 or 4)infection(not listed above),specify', 'Other serious (grade 3 or 4)infection(not listed above),specify'), ('Other serious (grade 3 or 4) non-infectious(not listed above),specify', 'Other serious (grade 3 or 4)non-infectious(not listed above),specify')], max_length=150, verbose_name='Diagnosis')),
                ('fu_dx_specify', models.CharField(blank=True, max_length=50, null=True, verbose_name='Diagnosis specification')),
                ('health_facility', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Seen at health facility for Dx')),
                ('was_hospitalized', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Hospitalized?')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical Infant FollowUp: Dx',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalInfantFuNewMedItems',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('medication', models.CharField(choices=[('Acyclovir', 'Acyclovir'), ('Albuterol', 'Albuterol'), ('Albendazol', 'Albendazol'), ('Aminophylline', 'Aminophylline'), ('Amoxicillin', 'Amoxicillin'), ('Ampicillin', 'Ampicillin'), ('Antibiotic,unknown(specify 1V or oral)', 'Antibiotic,unknown(specify 1V or oral)'), ('Azithromycin', 'Azithromycin'), ('Carbamazepine', 'Carbamazepine'), ('Ceftriaxone', 'Ceftriaxone'), ('Cotrimoxazole (trimethoprim/sulfamethoxazole)', 'Cotrimoxazole (trimethoprim/sulfamethoxazole)'), ('Cefaclor,cefixime,ceftizoxime,ceftraxone', 'Cefaclor,cefixime,ceftizoxime,ceftraxone'), ('Chloramphenicol', 'Chloramphenicol'), ('Ciprofloxacin', 'Ciprofloxacin'), ('Clarithromycin', 'Clarithromycin'), ('Cloxacillin', 'Cloxacillin'), ('Doxycycline', 'Doxycycline'), ('Dexamethasone', 'Dexamethasone'), ('Diazepam', 'Diazepam'), ('Erythromycin', 'Erythromycin'), ('Ethambutol', 'Ethambutol'), ('Ferrous sulfate', 'Ferrous sulfate'), ('Fuconazole', 'Fuconazole'), ('Foscarnate', 'Foscarnate'), ('Ganciclovir', 'Ganciclovir'), ('Gentamicin', 'Gentamicin'), ('Hydrocortisone', 'Hydrocortisone'), ('Insuline', 'Insuline'), ('Isoniazid', 'Isoniazid'), ('Ketoconazole', 'Ketoconazole'), ('Mebendazole', 'Mebendazole'), ('Metronidazole', 'Metronidazole'), ('Methylprednisolone', 'Methylprednisolone'), ('Nalidixic acid', 'Nalidixic acid'), ('Norfloxacin,Ofloxacin', 'Norfloxacin,Ofloxacin'), ('Pentamidine', 'Pentamidine'), ('Pyridoxine', 'Pyridoxine'), ('Phenytoin', 'Phenytoin'), ('Prednisolone', 'Prednisolone'), ('Pyrazinamide', 'Pyrazinamide'), ('Pyrimethamine', 'Pyrimethamine'), ('Quinidine', 'Quinidine'), ('Red blood cell transfusion', 'Red blood cell transfusion'), ('Rifampicin', 'Rifampicin'), ('Salbutamol', 'Salbutamol'), ('Streptomycin', 'Streptomycin'), ('Sulfadiazine', 'Sulfadiazine'), ('Terbinafine', 'Terbinafine'), ('Tetracycline', 'Tetracycline'), ('Theophylline', 'Theophylline'), ('Vancomycin', 'Vancomycin'), ('Vitamins(iron,B12,Folate)', 'Vitamins(iron,B12,Folate)'), ('Traditional medication', 'Traditional Medications'), ('OTHER', 'Other, specify ...')], max_length=100, verbose_name='Medication')),
                ('other_medication', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('date_first_medication', models.DateField(verbose_name='Date of first medication use')),
                ('stop_date', models.DateField(blank=True, null=True, verbose_name='Date medication was stopped')),
                ('drug_route', models.CharField(choices=[('1', 'Intramuscular'), ('2', 'Intravenous'), ('3', 'Oral'), ('4', 'Topical'), ('5', 'Subcutaneous'), ('6', 'Intravaginal'), ('7', 'Rectal'), ('9', 'Other')], max_length=20, verbose_name='Drug route')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical Infant FollowUp: New Med Items',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalInfantOffStudy',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('offstudy_date', models.DateField(validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model.validators.date.date_not_future], verbose_name='Off-study Date')),
                ('reason', models.CharField(max_length=115, verbose_name='Please code the primary reason participant taken off-study')),
                ('reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('comment', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical Infant Off-Study',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalInfantVaccines',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('vaccination', models.CharField(choices=[('Vitamin_A', 'Vitamin A'), ('BCG', 'BCG'), ('Hepatitis_B', 'Hepatitis B'), ('DPT', 'DPT (Diphtheria, Pertussis and Tetanus)'), ('Haemophilus_influenza', 'Haemophilus Influenza B Vaccine'), ('PCV_Vaccine', 'PCV Vaccine (Pneumonia Conjugated Vaccine)'), ('Polio', 'Polio'), ('Rotavirus', 'Rotavirus'), ('Measles', 'Measles'), ('Pentavalent', 'Pentavalent Vaccine (Contains DPT, Hepatitis B and Haemophilus Influenza B Vaccine)')], max_length=100, verbose_name='Since delivery, did the child receive any of the following vaccinations')),
                ('vaccine_date', models.DateField(blank=True, null=True, verbose_name='Date Vaccine was given')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical Infant Vaccines',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalInfantVisit',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=25, verbose_name='What is the reason for this visit?')),
                ('study_status', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=50, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'missed' above, Reason scheduled visit was missed")),
                ('info_source', models.CharField(max_length=25, verbose_name='What is the main source of this information?')),
                ('info_source_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model.validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('subject_identifier', models.CharField(editable=False, help_text='updated automatically', max_length=50, verbose_name='subject_identifier')),
                ('information_provider', models.CharField(max_length=20, verbose_name="Please indicate who provided most of the information for this participant's visit")),
                ('information_provider_other', models.CharField(blank=True, max_length=20, null=True, verbose_name='if information provider is Other, please specify')),
                ('is_present', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name="Is the participant present at today's visit")),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical Infant Visit',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalVaccinesMissed',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('missed_vaccine_name', models.CharField(blank=True, choices=[('Vitamin_A', 'Vitamin A'), ('BCG', 'BCG'), ('Hepatitis_B', 'Hepatitis B'), ('DPT', 'DPT (Diphtheria, Pertussis and Tetanus)'), ('Haemophilus_influenza', 'Haemophilus Influenza B Vaccine'), ('PCV_Vaccine', 'PCV Vaccine (Pneumonia Conjugated Vaccine)'), ('Polio', 'Polio'), ('Rotavirus', 'Rotavirus'), ('Measles', 'Measles'), ('Pentavalent', 'Pentavalent Vaccine (Contains DPT, Hepatitis B and Haemophilus Influenza B Vaccine)')], max_length=100, null=True, verbose_name='Missed vaccine name')),
                ('reason_missed', models.CharField(blank=True, choices=[('missed scheduled vaccination', 'Mother or Caregiver has not yet taken infant to clinic for this scheduled vaccination'), ('caregiver declines vaccination', 'Mother or Caregiver declines this vaccicnation'), ('no stock', 'Stock out at clinic'), ('OTHER', 'Other, specify')], max_length=100, null=True, verbose_name='Reasons infant missed vaccines')),
                ('reason_missed_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical Missed Vaccines',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='HistoricalVaccinesReceived',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, db_index=True, editable=False, help_text='System auto field. UUID primary key.')),
                ('received_vaccine_name', models.CharField(blank=True, choices=[('Vitamin_A', 'Vitamin A'), ('BCG', 'BCG'), ('Hepatitis_B', 'Hepatitis B'), ('DPT', 'DPT (Diphtheria, Pertussis and Tetanus)'), ('Haemophilus_influenza', 'Haemophilus Influenza B Vaccine'), ('PCV_Vaccine', 'PCV Vaccine (Pneumonia Conjugated Vaccine)'), ('Polio', 'Polio'), ('Rotavirus', 'Rotavirus'), ('Measles', 'Measles'), ('Pentavalent', 'Pentavalent Vaccine (Contains DPT, Hepatitis B and Haemophilus Influenza B Vaccine)')], max_length=100, null=True, verbose_name='Received vaccine name')),
                ('date_given', models.DateField(blank=True, null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date Given')),
                ('infant_age', models.CharField(blank=True, choices=[('At Birth', 'At Birth'), ('After Birth', 'After Birth'), ('2', '2 months'), ('3', '3 months'), ('4', '4 months'), ('6-11', '6-11 months'), ('9', '9 months'), ('12-17', '12-17 months'), ('18', '18 months'), ('18-29', '18-29 months'), ('24-29', '24-29 months'), ('30-35', '30-35 months'), ('36-41', '36-41 months'), ('42-47', '42-47 months'), ('48-53', '48-53 months'), ('54-59', '54-59 months')], max_length=35, null=True, verbose_name='Infant age when vaccine given')),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'ordering': ('-history_date', '-history_id'),
                'verbose_name': 'historical Received Vaccines',
                'get_latest_by': 'history_date',
            },
        ),
        migrations.CreateModel(
            name='InfantArvProph',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('prophylatic_nvp', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was the baby supposed to be taking taking prophylactic antiretroviral medication for any period since the last attended scheduled visit?')),
                ('arv_status', models.CharField(choices=[('no_mod', '1. No modifications made since the last attended scheduled visit or today'), ('start', '2. Starting today or has started since last attended scheduled visit'), ('discontinued', '3. Permanently discontinued at or before the last attended scheduled visit'), ('never_started', '4. Never started'), ('modified', '5. Change in at least one medication since the last attended scheduled visit or today'), ('N/A', 'Not applicable')], default='N/A', help_text='referring to prophylaxis other than single dose NVP', max_length=25, verbose_name="What is the status of the participant's ARV prophylaxis at this visit or since the last visit? ")),
            ],
            options={
                'verbose_name': 'Infant NVP or AZT Proph',
                'verbose_name_plural': 'Infant NVP or AZT Proph',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantArvProphMod',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('arv_code', models.CharField(choices=[('Nevirapine', 'NVP'), ('Kaletra', 'KAL'), ('Aluvia', 'ALU'), ('Truvada', 'TRV'), ('Tenoforvir', 'TDF'), ('Zidovudine', 'AZT'), ('Lamivudine', '3TC'), ('Efavirenz', 'EFV'), ('Didanosine', 'DDI'), ('Stavudine', 'D4T'), ('Nelfinavir', 'NFV'), ('Abacavir', 'ABC'), ('Combivir', 'CBV'), ('Ritonavir', 'RTV'), ('Trizivir', 'TZV'), ('Raltegravir', 'RAL'), ('Saquinavir,soft gel capsule', 'FOR'), ('Saquinavir,hard capsule', 'INV'), ('Kaletra or Aluvia', 'KAL or ALU'), ('Atripla', 'ATR'), ('HAART,unknown', 'HAART,unknown')], max_length=25, verbose_name='ARV Code')),
                ('dose_status', models.CharField(choices=[('New', 'New'), ('Permanently discontinued', 'Permanently discontinued'), ('Temporarily held', 'Temporarily held'), ('Dose modified', 'Dose modified'), ('Resumed', 'Resumed'), ('Not initiated', 'Not initiated')], max_length=25, verbose_name='Dose Status')),
                ('modification_date', models.DateField(verbose_name='Date ARV Modified')),
                ('modification_code', models.CharField(choices=[('Initial dose', 'Initial dose'), ('Never started', 'Never started'), ('Toxicity decreased_resolved', 'Toxicity decreased/resolved'), ('Completed PMTCT intervention', 'Completed PMTCT intervention'), ('Completed postpartum tail', 'Completed postpartum "tail"'), ('Scheduled dose increase', 'Scheduled dose increase'), ('Confirmed infant HIV infection, ending study drug', 'Confirmed infant HIV infection, ending study drug'), ('completed protocol', 'Completion of protocol-required period of study treatment'), ('HAART not available', 'HAART not available'), ('Anemia', 'Anemia'), ('Bleeding', 'Bleeding'), ('CNS symptoms', 'CNS symptoms (sleep, psych, etc)'), ('Diarrhea', 'Diarrhea'), ('Fatigue', 'Fatigue'), ('Headache', 'Headache'), ('Hepatotoxicity', 'Hepatotoxicity'), ('Nausea', 'Nausea'), ('Neutropenia', 'Neutropenia'), ('Thrombocytopenia', 'Thrombocytopenia'), ('Vomiting', 'Vomiting'), ('Rash', 'Rash'), ('Rash resolved', 'Rash resolved'), ('Neuropathy', 'Neuropathy'), ('Hypersensitivity_allergic reaction', 'Hypersensitivity / allergic reaction'), ('Pancreatitis', 'Pancreatitis'), ('Lactic Acidiosis', 'Lactic Acidiosis'), ('Pancytopenia', 'Pancytopenia'), ('Virologic failure', 'Virologic failure'), ('Immunologic failure', 'Immunologic failure(CD4)'), ('Clinical failure', 'Clinical failure'), ('Clinician request', 'Clinician request, other reason (including convenience)'), ('Subject request', 'Subject request, other reason (including convenience)'), ('Non-adherence with clinic visits', 'Non-adherence with clinic visits'), ('Non-adherence with ARVs', 'Non-adherence with ARVs'), ('Death', 'Death'), ('OTHER', 'Other')], max_length=50, verbose_name='Reason for Modification')),
                ('other_reason', models.CharField(blank=True, max_length=100, null=True, verbose_name='Specify Other')),
            ],
            options={
                'verbose_name': 'Infant NVP or AZT Proph: Mods',
                'verbose_name_plural': 'Infant NVP or AZT Proph: Mods',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantBirth',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Date and Time infant enrolled')),
                ('first_name', models.CharField(help_text="If infant name is unknown or not yet determined, use Baby + birth order + mother's last name, e.g. 'Baby1Malane'", max_length=25, verbose_name="Infant's first name")),
                ('initials', models.CharField(max_length=3)),
                ('dob', models.DateField(help_text='Must match labour and delivery report.', validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date of Birth')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female'), ('U', 'Undetermined')], max_length=10)),
            ],
            options={
                'verbose_name': 'Infant Birth',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantBirthArv',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('azt_after_birth', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Did infant receive AZT syrup after birth?')),
                ('azt_dose_date', models.DateField(blank=True, null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='If yes,date of first dose of AZT?')),
                ('azt_additional_dose', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown'), ('N/A', 'Not applicable')], help_text="if insufficient timing from delivery to next required dose has elapsed, please enter 'Not applicable'", max_length=15, verbose_name='Was the infant given additional doses of AZT before discharge from the hospital? ')),
                ('sdnvp_after_birth', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Did the infant receive single dose NVP after birth? ')),
                ('nvp_dose_date', models.DateField(blank=True, null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='If yes Date of first Dose NVP? ')),
                ('azt_discharge_supply', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown'), ('N/A', 'Not applicable')], help_text="if infant not yet discharged, please enter 'Not applicable'", max_length=15, verbose_name='Was the infant discharged with a supply of AZT? ')),
                ('infant_arv_comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information: ')),
            ],
            options={
                'verbose_name': 'Infant Birth Record: ARV',
                'verbose_name_plural': 'Infant Birth Record: ARV',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantBirthData',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('infant_gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], max_length=6, verbose_name='What is the gender of the infant?')),
                ('weight_kg', models.DecimalField(decimal_places=2, help_text='Measured in Kilograms (kg)', max_digits=3, verbose_name="What was the infant's birth weight? ")),
                ('infant_length', models.DecimalField(decimal_places=2, help_text='Measured in centimeters, (cm)', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(90)], verbose_name="What was the infant's length at birth? ")),
                ('head_circumference', models.DecimalField(decimal_places=2, help_text='Measured in centimeters, (cm)', max_digits=4, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(40)], verbose_name='What was the head circumference in centimeters? ')),
                ('apgar_score', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'No' go to question 10. Otherwise continue", max_length=3, verbose_name='Was Apgar Score performed? ')),
                ('apgar_score_min_1', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)], verbose_name='At 1 minute: ')),
                ('apgar_score_min_5', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)], verbose_name='At 5 minutes: ')),
                ('apgar_score_min_10', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(0)], verbose_name='At 10 minutes: ')),
                ('congenital_anomalities', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'Yes' please complete the Congenital Anomalies Form", max_length=3, verbose_name='Were any congenital anomalies identified? ')),
                ('other_birth_info', models.TextField(blank=True, max_length=250, null=True, verbose_name='Other birth information ')),
            ],
            options={
                'verbose_name': 'Infant Birth: Data',
                'verbose_name_plural': 'Infant Birth: Data',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantBirthExam',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('general_activity', models.CharField(choices=[('NORMAL', 'Normal'), ('ABNORMAL', 'Abnormal')], help_text='Report general activity ON THE DAY of the exam.', max_length=15, verbose_name='General Activity? ')),
                ('abnormal_activity', models.CharField(blank=True, max_length=100, null=True, verbose_name='If abnormal (specify)')),
                ('physical_exam_result', models.CharField(choices=[('NORMAL', 'Normal'), ('ABNORMAL', 'Abnormal'), ('NO_EXAM', 'No Exam Performed')], max_length=15, verbose_name='What was the result of the Physical Exam? ')),
                ('heent_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not_evaluated', 'Not evaluated'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='Was HEENT Exam Normal? ')),
                ('heent_no_other', models.TextField(blank=True, null=True, verbose_name='If abnormal or not evaluated, specify')),
                ('resp_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not_evaluated', 'Not evaluated'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='Was Respiratory Exam Normal?')),
                ('resp_exam_other', models.TextField(blank=True, null=True, verbose_name='If abnormal or not evaluated, specify')),
                ('cardiac_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not_evaluated', 'Not evaluated'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='Was Cardiac Exam Normal?')),
                ('cardiac_exam_other', models.TextField(blank=True, null=True, verbose_name='If abnormal or not evaluated,(specify)')),
                ('abdominal_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not_evaluated', 'Not evaluated'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='Was Abdominal Exam Normal?')),
                ('abdominal_exam_other', models.TextField(blank=True, null=True, verbose_name='If abnormal or not evaluated, specify')),
                ('skin_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not_evaluated', 'Not evaluated'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='Was Skin Exam Normal?')),
                ('skin_exam_other', models.TextField(blank=True, null=True, verbose_name='If abnormal or not evaluated, specify')),
                ('neurologic_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not_evaluated', 'Not evaluated'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='Was Neurological Exam Normal?')),
                ('neuro_exam_other', models.TextField(blank=True, null=True, verbose_name='If abnormal or not evaluated, specify')),
                ('other_exam_info', models.TextField(blank=True, max_length=250, null=True, verbose_name='Other infant exam information')),
            ],
            options={
                'verbose_name': 'Infant Birth: Exam',
                'verbose_name_plural': 'Infant Birth: Exam',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantBirthFeedingVaccine',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('feeding_after_delivery', models.CharField(choices=[('Breastfeeding only', 'Breastfeed only'), ('Formula feeding only', 'Formula feeding only'), ('Both breastfeeding and formula feeding', 'Both breastfeeding and formula feeding'), ('Medical complications: Infant did not feed', 'Medical complications: Infant did not feed')], help_text=' ...before discharge from maternity', max_length=50, verbose_name='How was the infant being fed immediately after delivery? ')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information: ')),
            ],
            options={
                'verbose_name': 'Birth Feeding & Vaccination',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantCardioDisorder',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('cardio_disorder', models.CharField(choices=[('None', 'None'), ('Truncus arteriosus', 'Truncus arteriosus'), ('Atrial septal defect', 'Atrial septal defect'), ('Ventricula septal defect', 'Ventricula septal defect'), ('Atrioventricular canal', 'Atrioventricular canal'), ('Complete transposition of the great vessels (without VSD)', 'Complete transposition of the great vessels (without VSD)'), ('Complete transposition of the great vessels (with VSD)', 'Complete transposition of the great vessels (with VSD)'), ('Tetralogy of Fallot', 'Tetralogy of Fallot'), ('Pulmonary valve stenosis or atresia', 'Pulmonary valve stenosis or atresia'), ('Tricuspid valve stenosis or atresia', 'Tricuspid valve stenosis or atresia'), ('Mitral valve stenosis or atresia', 'Mitral valve stenosis or atresia'), ('Hypoplastic left ventricle', 'Hypoplastic left ventricle'), ('Hypoplastic right ventricle', 'Hypoplastic right ventricle'), ('Congenital cardiomyopath (do not code if only isolated cardiomegaly)', 'Congenital cardiomyopath (do not code if only isolated cardiomegaly)'), ('Coarclation of the aorta', 'Coarclation of the aorta'), ('Total anomalous pulmonary venous return', 'Total anomalous pulmonary venous return'), ('Arteriovenous malformation, specify site', 'Arteriovenous malformation, specify site'), ('Patent ductous arteriosus (persisting >6 weeks of age)', 'Patent ductous arteriosus (persisting >6 weeks of age)'), ('OTHER', 'Other cardiovascular malformation, specify')], max_length=250, verbose_name='Cardiovascular disorders')),
                ('abnormality_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('SUSPECTED', 'Suspected')], max_length=35, verbose_name='Abnormality status')),
                ('cardiovascular_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies:Cardio',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantCleftDisorder',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('cleft_disorder', models.CharField(choices=[('None', 'None'), ('Cleft lip without cleft palate', 'Cleft lip without cleft palate'), ('Cleft palate without cleft lip', 'Cleft palate without cleft lip'), ('Cleft lip and palate', 'Cleft lip and palate'), ('Cleft uvula', 'Cleft uvula')], max_length=250, verbose_name='Cleft disorders')),
                ('abnormality_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('SUSPECTED', 'Suspected')], max_length=35, verbose_name='Abnormality status')),
                ('cleft_disorders_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies:Cleft',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantCns',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('cns', models.CharField(choices=[('None', 'None'), ('Anencephaly', 'Anencephaly'), ('Encephaloceis', 'Encephaloceis'), ('Spina bifida, open', 'Spina bifida, open'), ('Spina bifida, closed', 'Spina bifida, closed'), ('Holoprosencephaly', 'Holoprosencephaly'), ('Isolated hydroencephaly (not associated with spina bifida)', 'Isolated hydroencephaly (not associated with spina bifida)'), ('Other CNS defect, specify', 'Other CNS defect, specify')], max_length=250, verbose_name='Central nervous system abnormality')),
                ('abnormality_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('SUSPECTED', 'Suspected')], max_length=35, verbose_name='Abnormality status')),
                ('cns_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies:Cns',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantCongenitalAnomalies',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantDeathReport',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('study_drug_relationship', models.CharField(choices=[('not_related', 'Not related'), ('probably_not_related', 'Probably not related'), ('possibly_related', 'Possibly related'), ('probably_related', 'Probably related'), ('definitely_related', 'Definitely related')], max_length=25, verbose_name="Relationship between the infant's death and (CTX vs Placebo)")),
                ('infant_nvp_relationship', models.CharField(choices=[('not_related', 'Not related'), ('probably_not_related', 'Probably not related'), ('possibly_related', 'Possibly related'), ('probably_related', 'Probably related'), ('definitely_related', 'Definitely related')], max_length=25, verbose_name="Relationship between the infant's death and infant extended nevirapine prophylaxis ")),
                ('haart_relationship', models.CharField(choices=[('not_related', 'Not related'), ('probably_not_related', 'Probably not related'), ('possibly_related', 'Possibly related'), ('probably_related', 'Probably related'), ('definitely_related', 'Definitely related')], max_length=25, verbose_name="Relationship between the infant's death and HAART")),
                ('trad_med_relationship', models.CharField(choices=[('not_related', 'Not related'), ('probably_not_related', 'Probably not related'), ('possibly_related', 'Possibly related'), ('probably_related', 'Probably related'), ('definitely_related', 'Definitely related')], max_length=25, verbose_name="Relationship between the infant's death and traditional medicine use")),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('death_date', models.DateField(validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model.validators.date.date_not_future], verbose_name='Date of Death:')),
                ('cause_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('death_cause', models.TextField(blank=True, help_text='Note: Cardiac and pulmonary arrest are not major reasons and should not be used to describe major cause', max_length=1000, null=True, verbose_name='Describe the major cause of death(including pertinent autopsy information if available),starting with the first noticeable illness thought to be related to death,continuing to time of death.')),
                ('cause_category_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('participant_hospitalized', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was the participant hospitalised before death?')),
                ('reason_hospitalized_other', models.TextField(blank=True, max_length=250, null=True, verbose_name='if other illness or pathogen specify or non infectious reason, please specify below:')),
                ('days_hospitalized', models.IntegerField(default=0, help_text='in days', verbose_name='For how many days was the participant hospitalised during the illness immediately before death? ')),
                ('comment', models.TextField(blank=True, max_length=500, null=True, verbose_name='Comments')),
                ('illness_duration', models.IntegerField(help_text='in days (If unknown enter -1)', verbose_name='Duration of acute illness directly causing death   ')),
                ('perform_autopsy', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Will an autopsy be performed later  ')),
                ('diagnosis_code_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('cause', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edc_death_report.Cause', verbose_name='What is the primary source of cause of death information? (if multiple source of information, list one with the smallest number closest to the top of the list) ')),
                ('cause_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edc_death_report.CauseCategory', verbose_name='Based on the above description, what category best defines the major cause of death? ')),
                ('diagnosis_code', models.ForeignKey(help_text='Use diagnosis code from Diagnosis Reference Listing', max_length=25, on_delete=django.db.models.deletion.CASCADE, to='edc_death_report.DiagnosisCode', verbose_name='Please code the cause of death as one of the following:')),
            ],
            options={
                'verbose_name': 'Infant Death Report',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantFacialDefect',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('facial_defect', models.CharField(choices=[('None', 'None'), ('Anophthalmia/micro-opthalmia', 'Anophthalmia/micro-opthalmia'), ('Cataracts', 'Cataracts'), ('Coloboma', 'Coloboma'), ('OTHER eye abnormality', 'Other eye abnormality, specify'), ('Absence of ear', 'Absence of ear'), ('Absence of auditory canal', 'Absence of auditory canal'), ('Congenital deafness', 'Congenital deafness'), ('Microtia', 'Microtia'), ('OTHER ear anomaly', 'Other ear anomaly, specify'), ('Brachial cleft cyst, sinus or pit', 'Brachial cleft cyst, sinus or pit'), ('OTHER facial malformation', 'Other facial malformation, specify')], max_length=250, verbose_name='Facial defects')),
                ('abnormality_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('SUSPECTED', 'Suspected')], max_length=35, verbose_name='Abnormality status')),
                ('facial_defects_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
                ('congenital_anomalies', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantCongenitalAnomalies')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies:Facial',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantFeeding',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('last_att_sche_visit', models.DateField(blank=True, null=True, verbose_name='When was the last attended scheduled visit where an infant feeding form was completed? ')),
                ('other_feeding', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='If Formula Feeding or received any other foods or liquids answer YES.', max_length=3, verbose_name='Since the last attended scheduled visit where an infant feeding form was completed, has the child received any formula milk or  liquids other than breast-milk? ')),
                ('formula_intro_occur', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=3, verbose_name='Since the last attended scheduled visit has the child received any solid foods?')),
                ('formula_intro_date', models.DateField(blank=True, null=True, verbose_name='Date participant first received formula milk (or other foods or liquids)since last attended scheduled visit where an infant feeding form was completed')),
                ('took_formula', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('N/A', 'Not Applicable')], default='N/A', help_text='If formula feeding since last visit answer YES', max_length=10, verbose_name='Since the last attended scheduled visit where an infant feeding form was completed did the participant take Formula?')),
                ('is_first_formula', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], max_length=15, null=True, verbose_name='Is this the first reporting of infant formula use?')),
                ('date_first_formula', models.DateField(blank=True, help_text='provide date if this is first reporting of infant formula', null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date infant formula introduced?')),
                ('est_date_first_formula', models.CharField(blank=True, choices=[('Yes', 'Yes'), ('No', 'No')], help_text='provide date if this is first reporting of infant formula', max_length=15, null=True, verbose_name='Is date infant formula introduced estimated?')),
                ('water', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('N/A', 'Not Applicable')], default='N/A', help_text='Not as part of formula milk', max_length=10, verbose_name='Since the last attended scheduled visit where an infant feeding form was completed did the participant take Water?')),
                ('juice', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('N/A', 'Not Applicable')], default='N/A', help_text="If you answered YES to Q3 you must answer YES, NO or NOT SURE to this question, you may not answer 'Not Applicable'.", max_length=10, verbose_name='Since the last attended scheduled visit where an infant feeding form was completed did the participant take Juice?')),
                ('cow_milk', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('N/A', 'Not Applicable')], default='N/A', max_length=15, verbose_name="Since the last attended scheduled visit where an infant feeding form was completed did the participant take Cow's milk?")),
                ('cow_milk_yes', models.CharField(choices=[('boiled', '1. Boiled from cow'), ('unboiled', '2. Unboiled from cow'), ('store', '3. From store'), ('N/A', 'Not Applicable')], default='N/A', max_length=25, verbose_name="If 'Yes', cow's milk was...")),
                ('other_milk', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('N/A', 'Not Applicable')], default='N/A', max_length=15, verbose_name='Since the last attended scheduled visit where an infant feeding form was completed did the participant take Other animal milk?')),
                ('other_milk_animal', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('milk_boiled', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('N/A', 'Not Applicable')], default='N/A', max_length=10, verbose_name='Was milk boiled?')),
                ('fruits_veg', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('N/A', 'Not Applicable')], default='N/A', max_length=10, verbose_name='Since the last attended scheduled visit where an infant feeding form was completed did the participant take Fruits/vegetables')),
                ('cereal_porridge', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('N/A', 'Not Applicable')], default='N/A', max_length=12, verbose_name='Since the last attended scheduled visit where an infant feeding form was completed did the participant take Cereal/porridge?')),
                ('solid_liquid', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('N/A', 'Not Applicable')], default='N/A', max_length=10, verbose_name='Since the last attended scheduled visit where an infant feeding form was completed did the participant take Other solids and liquids')),
                ('rehydration_salts', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not Sure', 'Not Sure'), ('N/A', 'Not Applicable')], default='N/A', max_length=12, verbose_name='Since the last attended scheduled visit where an infant feeding form was completed did the participant take Oral rehydaration salts')),
                ('water_used', models.CharField(choices=[('Water direct from source', 'Water direct from source'), ('Water boiled immediately before use', 'Water boiled immediately before use'), ('Water boiled earlier and then stored', 'Water boiled earlier and then stored'), ('Specifically treated water', 'Specifically treated water'), ('OTHER', 'Other (specify)'), ('N/A', 'Not Applicable')], default='N/A', max_length=50, verbose_name="What water do you usually use to prepare the participant's milk?")),
                ('water_used_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('ever_breastfeed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Since the last attended scheduled visit,did the infant ever breast-feed')),
                ('complete_weaning', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=3, verbose_name="If 'NO', did complete weaning from breast milk take place before the last attended scheduled visit?")),
                ('weaned_completely', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('N/A', 'Not applicable')], default='N/A', max_length=3, verbose_name='Is the participant currently completely weaned from breast milk (at least 72 hours without breast feeding,no intention to re-start)?')),
                ('most_recent_bm', models.DateField(blank=True, null=True, verbose_name='Date of most recent breastfeeding ')),
                ('times_breastfed', models.CharField(choices=[('<1 per week', '1. Less than once per week'), ('<1 per day, but at least once per week', '2. Less than once per day, but at least once per week'), ('about 1 per day on most days', '3. About once per day on most days'), ('>1 per day, but not for all feedings', '4. More than once per day, but not for all feedings'), ('For all feedings', '5. For all feedings (i.e no formula or other foods or liquids)'), ('N/A', 'Not Applicable')], default='N/A', max_length=50, verbose_name='Between the last attended scheduled visit where an infant feeding form was completed and date of most recent breastfeeding,how often did the participant receive breast milk for feeding?')),
                ('comments', models.TextField(blank=True, max_length=200, null=True, verbose_name="List any comments about participant's feeding that are not answered above")),
            ],
            options={
                'verbose_name': 'Infant Feeding',
                'verbose_name_plural': 'Infant Feeding',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantFemaleGenital',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('female_genital', models.CharField(choices=[('None', 'None'), ('Ambinguous genitalia, female', 'Ambinguous genitalia, female'), ('Vaginal agenesis', 'Vaginal agenesis'), ('Absent or streak ovary', 'Absent or streak ovary'), ('Uterine anomaly', 'Uterine anomaly'), ('OTHER', 'Other ovarian, fallopian, uterine, cervical, vaginal, or vulvar abnormality')], max_length=250, verbose_name='Female genital anomaly')),
                ('abnormality_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('SUSPECTED', 'Suspected')], max_length=35, verbose_name='Abnormality status')),
                ('female_genital_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
                ('congenital_anomalies', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantCongenitalAnomalies')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies:Female Gen',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantFu',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('physical_assessment', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Was physical assessment done today?')),
                ('diarrhea_illness', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='Must be of grade 3 or 4', max_length=3, verbose_name='Since the last scheduled visit, has the infant had any diarrheal illness (at least 3 loose stools per day which is ALSO a change from the normal)')),
                ('has_dx', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="'NEW events' are those that were never previously reported OR a NEW episode of a previously resolved diagnosis", max_length=25, verbose_name='Since the last attended scheduled visit, has the infant had any diagnosis that were NEW events')),
                ('was_hospitalized', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text="If 'Yes', the primary diagnosis(es) associated with the hospitalization(s) must be recorded in follow up diagnoses section.", max_length=3, verbose_name='Has the child been hospitalized overnight since the last scheduled visit (or since discharge after birth,if this is the randomization visit)?')),
                ('days_hospitalized', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(90)], verbose_name="If 'Yes', total number of days of hospitalization since the last scheduled visit.")),
            ],
            options={
                'verbose_name': 'Infant FollowUp',
                'verbose_name_plural': 'Infant FollowUp',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantFuDx',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
            ],
            options={
                'verbose_name': 'Infant FollowUp: Dx',
                'verbose_name_plural': 'Infant FollowUp: Dx',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantFuDxItems',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('fu_dx', models.CharField(choices=[('Poor weight gain or failure to thrive', 'Poor weight gain or failure to thrive'), ('Severe diarrhea or gastroenteritis', 'Severe diarrhea or gastroenteritis'), ('Pneumonia, suspected (no CXR or microbiologic confirmation)', 'Pneumonia, suspected (no CXR or microbiologic confirmation)'), ('Pneumonia, CXR confirmed, no bacterial pathogen', 'Pneumonia, CXR confirmed, no bacterial pathogen'), ('Pneumonia, CXR confirmed, bacterial pathogen isolated (specify pathogen)', 'Pneumonia, CXR confirmed, bacterial pathogen isolated (specify pathogen)'), ('Pulmonary TB, suspected(no CXR or microbiologic confirmation)', 'Pulmonary TB, suspected(no CXR or microbiologic confirmation)'), ('Pulmonary TB, CXR-confirmed (no microbiologic confirmation)', 'Pulmonary TB, CXR-confirmed (no microbiologic confirmation)'), ('Pulmonary TB, smear and/or culture positive', 'Pulmonary TB, smear and/or culture positive'), ('Extrapulmonary TB,suspected (no CXR or microbiologic confirmation)', 'Extrapulmonary TB,suspected (no CXR or microbiologic confirmation)'), ('Bronchiolitis (not bronchitis)', 'Bronchiolitis (not bronchitis)'), ('Hepatitis:Drug related', 'Hepatitis:Drug related (report for Grades 2,3,4)'), ('Hepatitis:Traditional medication related', 'Hepatitis:Traditional medication related'), ('Hepatitis:Hepatitis A', 'Hepatitis:Hepatitis A'), ('Hepatitis:Hepatitis B', 'Hepatitis:Hepatitis B'), ('Hepatitis:Other/Unknown', 'Hepatitis:Other/Unknown'), ('Sepsis,unspecified', 'Sepsis,unspecified'), ('Sepsis,pathogen specified', 'Sepsis,pathogen specified'), ('Meningitis,unspecified', 'Meningitis,unspecified'), ('Meningitis pathogen specified', 'Meningitis pathogen specified'), ('Otitis media', 'Otitis media'), ('Appendicitis', 'Appendicitis'), ('Cholecystitis/cholanangitis', 'Cholecystitis/cholanangitis'), ('Pancreatitis', 'Pancreatitis'), ('Acute Renal Failure', 'Acute Renal Failure (Record highest creatinine level if creatine tested outside of the study) '), ('Anemia', 'Anemia(Only report grade 3 or 4 anemia based on a lab value drawn outside the study'), ('Rash', 'Rash (report for Grades 2,3,4)'), ('Trauma/accident', 'Trauma/accident'), ('Other abnormallaboratory tests(other than tests listed above or tests done as part of this study), specify test and result', 'Other abnormallaboratory tests(other than tests listed above or tests done as part of this study),specify test and result'), ('New congenital abnormality not previously identified?,specify', 'New congenital abnormality not previously identified?,specify and complete "Congenital Anomaly"form'), ('Other serious (grade 3 or 4)infection(not listed above),specify', 'Other serious (grade 3 or 4)infection(not listed above),specify'), ('Other serious (grade 3 or 4) non-infectious(not listed above),specify', 'Other serious (grade 3 or 4)non-infectious(not listed above),specify')], max_length=150, verbose_name='Diagnosis')),
                ('fu_dx_specify', models.CharField(blank=True, max_length=50, null=True, verbose_name='Diagnosis specification')),
                ('health_facility', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Seen at health facility for Dx')),
                ('was_hospitalized', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], max_length=3, verbose_name='Hospitalized?')),
                ('infant_fu_dx', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantFuDx')),
            ],
            options={
                'verbose_name': 'Infant FollowUp: Dx',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantFuImmunizations',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('vaccines_received', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=25, verbose_name='Did this infant receive any vaccinations since the last visit')),
                ('vaccines_missed', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=25, verbose_name='Is the child missing any vaccinations?')),
            ],
            options={
                'verbose_name': 'Infant FollowUp: Immunizations',
                'verbose_name_plural': 'Infant FollowUp: Immunizations',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantFuNewMed',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('new_medications', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], help_text='do not report if the same course was recorded at previous visit. only report oral and intravenous meds', max_length=25, verbose_name='Has the child recieved a NEW course of any of the following medications since the last attended scheduled visit')),
            ],
            options={
                'verbose_name': 'Infant FollowUp: New Medication',
                'verbose_name_plural': 'Infant FollowUp: New Medication',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantFuNewMedItems',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('medication', models.CharField(choices=[('Acyclovir', 'Acyclovir'), ('Albuterol', 'Albuterol'), ('Albendazol', 'Albendazol'), ('Aminophylline', 'Aminophylline'), ('Amoxicillin', 'Amoxicillin'), ('Ampicillin', 'Ampicillin'), ('Antibiotic,unknown(specify 1V or oral)', 'Antibiotic,unknown(specify 1V or oral)'), ('Azithromycin', 'Azithromycin'), ('Carbamazepine', 'Carbamazepine'), ('Ceftriaxone', 'Ceftriaxone'), ('Cotrimoxazole (trimethoprim/sulfamethoxazole)', 'Cotrimoxazole (trimethoprim/sulfamethoxazole)'), ('Cefaclor,cefixime,ceftizoxime,ceftraxone', 'Cefaclor,cefixime,ceftizoxime,ceftraxone'), ('Chloramphenicol', 'Chloramphenicol'), ('Ciprofloxacin', 'Ciprofloxacin'), ('Clarithromycin', 'Clarithromycin'), ('Cloxacillin', 'Cloxacillin'), ('Doxycycline', 'Doxycycline'), ('Dexamethasone', 'Dexamethasone'), ('Diazepam', 'Diazepam'), ('Erythromycin', 'Erythromycin'), ('Ethambutol', 'Ethambutol'), ('Ferrous sulfate', 'Ferrous sulfate'), ('Fuconazole', 'Fuconazole'), ('Foscarnate', 'Foscarnate'), ('Ganciclovir', 'Ganciclovir'), ('Gentamicin', 'Gentamicin'), ('Hydrocortisone', 'Hydrocortisone'), ('Insuline', 'Insuline'), ('Isoniazid', 'Isoniazid'), ('Ketoconazole', 'Ketoconazole'), ('Mebendazole', 'Mebendazole'), ('Metronidazole', 'Metronidazole'), ('Methylprednisolone', 'Methylprednisolone'), ('Nalidixic acid', 'Nalidixic acid'), ('Norfloxacin,Ofloxacin', 'Norfloxacin,Ofloxacin'), ('Pentamidine', 'Pentamidine'), ('Pyridoxine', 'Pyridoxine'), ('Phenytoin', 'Phenytoin'), ('Prednisolone', 'Prednisolone'), ('Pyrazinamide', 'Pyrazinamide'), ('Pyrimethamine', 'Pyrimethamine'), ('Quinidine', 'Quinidine'), ('Red blood cell transfusion', 'Red blood cell transfusion'), ('Rifampicin', 'Rifampicin'), ('Salbutamol', 'Salbutamol'), ('Streptomycin', 'Streptomycin'), ('Sulfadiazine', 'Sulfadiazine'), ('Terbinafine', 'Terbinafine'), ('Tetracycline', 'Tetracycline'), ('Theophylline', 'Theophylline'), ('Vancomycin', 'Vancomycin'), ('Vitamins(iron,B12,Folate)', 'Vitamins(iron,B12,Folate)'), ('Traditional medication', 'Traditional Medications'), ('OTHER', 'Other, specify ...')], max_length=100, verbose_name='Medication')),
                ('other_medication', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('date_first_medication', models.DateField(verbose_name='Date of first medication use')),
                ('stop_date', models.DateField(blank=True, null=True, verbose_name='Date medication was stopped')),
                ('drug_route', models.CharField(choices=[('1', 'Intramuscular'), ('2', 'Intravenous'), ('3', 'Oral'), ('4', 'Topical'), ('5', 'Subcutaneous'), ('6', 'Intravaginal'), ('7', 'Rectal'), ('9', 'Other')], max_length=20, verbose_name='Drug route')),
                ('infant_fu_med', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantFuNewMed')),
            ],
            options={
                'verbose_name': 'Infant FollowUp: New Med Items',
                'verbose_name_plural': 'Infant FollowUp: New Med Items',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantFuPhysical',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('weight_kg', models.DecimalField(decimal_places=2, help_text='Please measure twice and enter the average of the two. Measured in kg.', max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(20.0)], verbose_name='Weight ')),
                ('height', models.DecimalField(decimal_places=2, help_text='Please measure twice and enter the average of the two. Measured in centimeters, (cm)', max_digits=6, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(90)], verbose_name='Height ')),
                ('head_circumference', models.DecimalField(decimal_places=2, help_text='Please measure twice and enter the average of the two. Measured in centimeters, (cm)', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(50.0)], verbose_name='What was the head circumference in centimeters? ')),
                ('general_activity', models.CharField(choices=[('NORMAL', 'Normal'), ('ABNORMAL', 'Abnormal')], help_text='Report general activity ON THE DAY of the exam.', max_length=15, verbose_name='General Activity? ')),
                ('abnormal_activity', models.CharField(blank=True, max_length=100, null=True, verbose_name='If abnormal (specify)')),
                ('physical_exam_result', models.CharField(choices=[('NORMAL', 'Normal'), ('ABNORMAL', 'Abnormal'), ('NO_EXAM', 'No Exam Performed')], max_length=15, verbose_name='What was the result of the Physical Exam? ')),
                ('heent_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not_evaluated', 'Not evaluated'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='Was HEENT Exam Normal? ')),
                ('heent_no_other', models.TextField(blank=True, null=True, verbose_name='If abnormal or not evaluated, specify')),
                ('resp_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not_evaluated', 'Not evaluated'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='Was Respiratory Exam Normal?')),
                ('resp_exam_other', models.TextField(blank=True, null=True, verbose_name='If abnormal or not evaluated, specify')),
                ('cardiac_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not_evaluated', 'Not evaluated'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='Was Cardiac Exam Normal?')),
                ('cardiac_exam_other', models.TextField(blank=True, null=True, verbose_name='If abnormal or not evaluated,(specify)')),
                ('abdominal_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not_evaluated', 'Not evaluated'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='Was Abdominal Exam Normal?')),
                ('abdominal_exam_other', models.TextField(blank=True, null=True, verbose_name='If abnormal or not evaluated, specify')),
                ('skin_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not_evaluated', 'Not evaluated'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='Was Skin Exam Normal?')),
                ('skin_exam_other', models.TextField(blank=True, null=True, verbose_name='If abnormal or not evaluated, specify')),
                ('neurologic_exam', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Not_evaluated', 'Not evaluated'), ('N/A', 'Not applicable')], default='N/A', max_length=15, verbose_name='Was Neurological Exam Normal?')),
                ('neuro_exam_other', models.TextField(blank=True, null=True, verbose_name='If abnormal or not evaluated, specify')),
            ],
            options={
                'verbose_name': 'Infant FollowUp: Physical',
                'verbose_name_plural': 'Infant FollowUp: Physical',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantLowerGi',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('lower_gi', models.CharField(choices=[('None', 'None'), ('Duodenal atresia, stenosis, or absence', 'Duodenal atresia, stenosis, or absence'), ('Jejunal atresis, stenosis, or absence', 'Jejunal atresis, stenosis, or absence'), ('Ileal atresia, stenosis, or absence', 'Ileal atresia, stenosis, or absence'), ('Atresia, stenosis, or absence of large intestine, rectum, or anus', 'Atresia, stenosis, or absence of large intestine, rectum, or anus'), ('Hirschsprung disease', 'Hirschsprung disease'), ('OTHER megacolon', 'Other megacolon'), ('Liver, pancreas, or gall bladder defect, specify', 'Liver, pancreas, or gall bladder defect, specify'), ('Diaphramtic hernia', 'Diaphramtic hernia'), ('OTHER GI anomaly', 'Other GI anomaly, specify')], max_length=250, verbose_name='Lower gastrointestinal abnormalities')),
                ('abnormality_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('SUSPECTED', 'Suspected')], max_length=35, verbose_name='Abnormality status')),
                ('lower_gi_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
                ('congenital_anomalies', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantCongenitalAnomalies')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies:Lower GI',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantMaleGenital',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('male_genital', models.CharField(choices=[('None', 'None'), ('Hypospadias, specify degree', 'Hypospadias, specify degree'), ('Chordee', 'Chordee'), ('Ambiguous genitalia, male', 'Ambiguous genitalia, male'), ('Undescended testis', 'Undescended testis'), ('OTHER', 'Other male genital abnormality, specify')], max_length=250, verbose_name='Male genital anomaly')),
                ('abnormality_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('SUSPECTED', 'Suspected')], max_length=35, verbose_name='Abnormality status')),
                ('male_genital_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
                ('congenital_anomalies', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantCongenitalAnomalies')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies:Male Gen',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantMouthUpGi',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('mouth_up_gi', models.CharField(choices=[('None', 'None'), ('Aglossia', 'Aglossia'), ('Macroglossia', 'Macroglossia'), ('OTHER mouth, lip, or tongue', 'Other mouth, lip, or tongue anomaly, specify'), ('Esophageal atresia', 'Esophageal atresia'), ('Tracheoesphageal fistula', 'Tracheoesphageal fistula'), ('Esophageal web', 'Esophageal web'), ('Pyloric stenosis', 'Pyloric stenosis'), ('OTHER esophageal or stomach', 'Other esophageal or stomach abnormality, specify')], max_length=250, verbose_name='Mouth and upper gastrointestinal disorders')),
                ('abnormality_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('SUSPECTED', 'Suspected')], max_length=35, verbose_name='Abnormality status')),
                ('mouth_up_gi_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
                ('congenital_anomalies', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantCongenitalAnomalies')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies:MouthUp',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantMusculoskeletal',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('musculo_skeletal', models.CharField(choices=[('None', 'None'), ('Craniosynostosis', 'Craniosynostosis'), ('Torticollis', 'Torticollis'), ('Congenital scoliosis, lordosis', 'Congenital scoliosis, lordosis'), ('Congenital dislocation of hip', 'Congenital dislocation of hip'), ('Talipes equinovarus (club feet excluding metatarsus varus)', 'Talipes equinovarus (club feet excluding metatarsus varus)'), ('Funnel chest or pigeon chest (pectus excavatum or carinaturn)', 'Funnel chest or pigeon chest (pectus excavatum or carinaturn)'), ('Polydactyly', 'Polydactyly'), ('Syndactyly', 'Syndactyly'), ('Other hand malformation, specify', 'Other hand malformation, specify'), ('Webbed fingers or toes', 'Webbed fingers or toes'), ('Upper limb reduction defect, specify', 'Upper limb reduction defect, specify'), ('Lower limb reduction defect, specify', 'Lower limb reduction defect, specify'), ('Other limb defect, specify', 'Other limb defect, specify'), ('Other skull abnormality, specify', 'Other skull abnormality, specify'), ('Anthrogryposis', 'Anthrogryposis'), ('Vertebral or rib abnormalities, specify', 'Vertebral or rib abnormalities, specify'), ('Osteogenesis imperfecta', 'Osteogenesis imperfecta'), ('Dwarfing syndrome, specify', 'Dwarfing syndrome, specify'), ('Congenital diaphramatic hernia', 'Congenital diaphramatic hernia'), ('Omphalocele', 'Omphalocele'), ('Gastroschisis', 'Gastroschisis'), ('OTHER', 'Other muscular or skeletal abnormality or syndrome, specify')], max_length=250, verbose_name='Musculo-skeletal abnomalities')),
                ('abnormality_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('SUSPECTED', 'Suspected')], max_length=35, verbose_name='Abnormality status')),
                ('musculo_skeletal_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
                ('congenital_anomalies', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantCongenitalAnomalies')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies: Musculo-sk',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantOffStudy',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('offstudy_date', models.DateField(validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model.validators.date.date_not_future], verbose_name='Off-study Date')),
                ('reason', models.CharField(max_length=115, verbose_name='Please code the primary reason participant taken off-study')),
                ('reason_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('comment', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
            ],
            options={
                'verbose_name': 'Infant Off-Study',
                'verbose_name_plural': 'Infant Off-Study',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantOtherAbnormalityItems',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('other_abnormalities', models.CharField(choices=[('None', 'None'), ('OTHER', 'Other defect/syndrome not already reported, specify')], max_length=250, verbose_name='Other')),
                ('abnormality_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('SUSPECTED', 'Suspected')], max_length=35, verbose_name='Abnormality status')),
                ('other_abnormalities_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
                ('congenital_anomalies', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantCongenitalAnomalies')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies: Other',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantRenal',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('renal', models.CharField(choices=[('None', 'None'), ('Bilateral renal agenesis', 'Bilateral renal agenesis'), ('Unilateral renal agenesis or dysplasia', 'Unilateral renal agenesis or dysplasia'), ('Polycystic kidneys', 'Polycystic kidneys'), ('Congenital hydronephrosis', 'Congenital hydronephrosis'), ('Unilateral stricture, stenosis, or hypoplasia', 'Unilateral stricture, stenosis, or hypoplasia'), ('Duplicated kidney or collecting system', 'Duplicated kidney or collecting system'), ('Horseshoe kidney', 'Horseshoe kidney'), ('Exstrophy of bladder', 'Exstrophy of bladder'), ('Posterior urethral valves', 'Posterior urethral valves'), ('OTHER', 'Other renal, ureteral, bladder, urethral abnormality, specify')], max_length=250, verbose_name='Renal anomalies')),
                ('abnormality_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('SUSPECTED', 'Suspected')], max_length=35, verbose_name='Abnormality status')),
                ('renal_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
                ('congenital_anomalies', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantCongenitalAnomalies')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies: Renal',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantRespiratoryDefect',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('respiratory_defect', models.CharField(choices=[('None', 'None'), ('Choanal atresia', 'Choanal atresia'), ('Agenesis or underdevelopment of nose', 'Agenesis or underdevelopment of nose'), ('Nasal cleft', 'Nasal cleft'), ('Single nostril, proboscis', 'Single nostril, proboscis'), ('OTHER nasal or sinus abnormality', 'Other nasal or sinus abnormality, specify'), ('Lryngeal web. glottic or subglottic', 'Lryngeal web. glottic or subglottic'), ('Congenital laryngeal stenosis', 'Congenital laryngeal stenosis'), ('OTHER laryngeal, tracheal or bronchial anomalies', 'Other laryngeal, tracheal or bronchial anomalies'), ('Single lung cyst', 'Single lung cyst'), ('Polycystic lung', 'Polycystic lung'), ('OTHER', 'Other respiratory anomaly, specify')], max_length=250, verbose_name='Respiratory defects')),
                ('abnormality_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('SUSPECTED', 'Suspected')], max_length=35, verbose_name='Abnormality status')),
                ('respiratory_defects_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
                ('congenital_anomalies', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantCongenitalAnomalies')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies:Respiratory',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantSkin',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('skin', models.CharField(choices=[('None', 'None'), ('Icthyosis', 'Icthyosis'), ('Ectodermal dysplasia', 'Ectodermal dysplasia'), ('OTHER', 'Other skin abnormality, specify')], help_text='Excludes cafe au lait spots, Mongolian spots, port wine stains, nevus, hemangloma <4 cm in diameter. If hemangloma is >4 cm, specify', max_length=250, verbose_name='Skin abnormalities')),
                ('abnormality_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('SUSPECTED', 'Suspected')], max_length=35, verbose_name='Abnormality status')),
                ('skin_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
                ('congenital_anomalies', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantCongenitalAnomalies')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies: Skin',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantTrisomies',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('trisomies', models.CharField(choices=[('None', 'None'), ('Trisomy 21', 'Trisomy 21'), ('Trisomy 13', 'Trisomy 13'), ('Trisomy 18', 'Trisomy 18'), ('OTHER trisomy, specify', 'Other trisomy, specify'), ('OTHER non-trisomic chromosome', 'Other non-trisomic chromosome abnormality, specify')], max_length=250, verbose_name='Trisomies / chromosomes abnormalities')),
                ('abnormality_status', models.CharField(choices=[('CONFIRMED', 'Confirmed'), ('SUSPECTED', 'Suspected')], max_length=35, verbose_name='Abnormality status')),
                ('trisomies_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, max_length=250, null=True, verbose_name='...if "Other", specify')),
                ('congenital_anomalies', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantCongenitalAnomalies')),
            ],
            options={
                'verbose_name': 'Congenital Anomalies: Trisomes',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantVaccines',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('vaccination', models.CharField(choices=[('Vitamin_A', 'Vitamin A'), ('BCG', 'BCG'), ('Hepatitis_B', 'Hepatitis B'), ('DPT', 'DPT (Diphtheria, Pertussis and Tetanus)'), ('Haemophilus_influenza', 'Haemophilus Influenza B Vaccine'), ('PCV_Vaccine', 'PCV Vaccine (Pneumonia Conjugated Vaccine)'), ('Polio', 'Polio'), ('Rotavirus', 'Rotavirus'), ('Measles', 'Measles'), ('Pentavalent', 'Pentavalent Vaccine (Contains DPT, Hepatitis B and Haemophilus Influenza B Vaccine)')], max_length=100, verbose_name='Since delivery, did the child receive any of the following vaccinations')),
                ('vaccine_date', models.DateField(blank=True, null=True, verbose_name='Date Vaccine was given')),
                ('infant_birth_feed_vaccine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantBirthFeedingVaccine')),
            ],
            options={
                'verbose_name': 'Infant Vaccines',
                'verbose_name_plural': 'Infant Vaccines',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='InfantVisit',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(help_text='Date and time of this report', validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Visit Date and Time')),
                ('reason', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=25, verbose_name='What is the reason for this visit?')),
                ('study_status', models.CharField(help_text='<Override the field class for this model field attribute in ModelForm>', max_length=50, verbose_name="What is the participant's current study status")),
                ('require_crfs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name='Are scheduled data being submitted with this visit?')),
                ('reason_missed', models.CharField(blank=True, max_length=35, null=True, verbose_name="If 'missed' above, Reason scheduled visit was missed")),
                ('info_source', models.CharField(max_length=25, verbose_name='What is the main source of this information?')),
                ('info_source_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('survival_status', models.CharField(choices=[('alive', 'Alive'), ('dead', 'Dead'), ('unknown', 'Unknown')], default='alive', max_length=10, null=True, verbose_name="Participant's survival status")),
                ('last_alive_date', models.DateField(blank=True, null=True, validators=[edc_protocol.validators.date_not_before_study_start, edc_base.model.validators.date.date_not_future], verbose_name='Date participant last known alive')),
                ('comments', models.TextField(blank=True, max_length=250, null=True, verbose_name='Comment if any additional pertinent information about the participant')),
                ('subject_identifier', models.CharField(editable=False, help_text='updated automatically', max_length=50, verbose_name='subject_identifier')),
                ('information_provider', models.CharField(max_length=20, verbose_name="Please indicate who provided most of the information for this participant's visit")),
                ('information_provider_other', models.CharField(blank=True, max_length=20, null=True, verbose_name='if information provider is Other, please specify')),
                ('is_present', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No')], default='Yes', max_length=10, verbose_name="Is the participant present at today's visit")),
                ('appointment', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_appointment.Appointment')),
            ],
            options={
                'verbose_name': 'Infant Visit',
                'verbose_name_plural': 'Infant Visit',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SolidFoodAssessment',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('exported', models.BooleanField(default=False, editable=False, help_text="system field for export tracking. considered 'exported' if both sent and received.")),
                ('exported_datetime', models.DateTimeField(editable=False, help_text='system field for export tracking.', null=True)),
                ('export_change_type', models.CharField(choices=[('I', 'Insert'), ('U', 'Update'), ('D', 'Delete')], default='I', editable=False, help_text='system field for export tracking.', max_length=1)),
                ('export_uuid', django_extensions.db.fields.UUIDField(blank=True, editable=False, help_text='system field for export tracking.')),
                ('report_datetime', models.DateTimeField(default=django.utils.timezone.now, help_text="If reporting today, use today's date/time, otherwise use the date/time this information was reported.", validators=[edc_protocol.validators.datetime_not_before_study_start, edc_base.model.validators.date.datetime_not_future], verbose_name='Report Date')),
                ('age_solid_food', models.IntegerField(help_text='Months.', verbose_name='At approximately what age, in months did this child start receiving solid foods (foods other than breast milk or formula?)')),
                ('solid_foods_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, null=True, verbose_name='...if "Other", specify')),
                ('porridge', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Since this time yesterday, has this child had any porridge?')),
                ('porridge_freq', models.IntegerField(blank=True, null=True, verbose_name='If yes, please indicate how many times this child has had porridge in the last week')),
                ('tsabana', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Since this time yesterday, has this child had any tsabana?')),
                ('tsabana_week', models.IntegerField(blank=True, null=True, verbose_name='If yes, then please indicate how many times this child usually eats tsabana in a week')),
                ('mother_tsabana', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name="Does the mother in this child's household usually eat tsabana?")),
                ('meat', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Since this time yesterday, has this child had any meat, chicken or fish?')),
                ('meat_freq', models.IntegerField(blank=True, null=True, verbose_name='If yes, please indicate how many times this child has had meat, chicken or fish in the last week')),
                ('potatoes', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], help_text=' Do not count a sweet potato under this question.', max_length=15, verbose_name='Since this time yesterday, has this child had any potatoes?')),
                ('potatoes_freq', models.IntegerField(blank=True, null=True, verbose_name='If yes, please indicate how many times this child has had meat, chicken or fish in the last week')),
                ('carrot_swt_potato', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Since this time yesterday, has this child had pumpkin, carrot or sweet potato?')),
                ('carrot_swt_potato_freq', models.IntegerField(blank=True, null=True, verbose_name='If yes, please indicate how many times this child has had carrot, pumpkin or sweet potato in the last week')),
                ('green_veg', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Since this time yesterday, has this child had any green vegetables?')),
                ('green_veg_freq', models.IntegerField(blank=True, null=True, verbose_name='If yes, please indicate how many times this child has had green vegetables in the last week')),
                ('fresh_fruits', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Since this time yesterday, has this child had any fresh fruits?')),
                ('fresh_fruits_freq', models.IntegerField(blank=True, null=True, verbose_name='If yes, please indicate how many times this child has had fresh fruits in the last week')),
                ('fullcream_milk', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], help_text='Powdered, fresh or long-life', max_length=15, verbose_name='Since this time yesterday, has this child had any full cream milk?')),
                ('fullcream_milk_freq', models.IntegerField(blank=True, null=True, verbose_name='If yes, please indicate how many times this child has had full cream milk in the last week')),
                ('skim_milk', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], help_text='Powdered, fresh or long-life', max_length=15, verbose_name='Since this time yesterday, has this child had any skim or part-skim milk?')),
                ('skim_milk_freq', models.IntegerField(blank=True, null=True, verbose_name='If yes, please indicate how many times this child has had any skim or part-skim in the last week')),
                ('raw_milk', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Since this time yesterday, has this child had any raw animal milk?')),
                ('raw_milk_freq', models.IntegerField(blank=True, null=True, verbose_name='If yes, please indicate how many times this child has had raw animal milk in the last week')),
                ('juice', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Since this time yesterday, has this child had any juice?')),
                ('juice_freq', models.IntegerField(blank=True, null=True, verbose_name='If yes, please indicate how many times this child has had juice in the last week')),
                ('eggs', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Since this time yesterday, has this child had any eggs?')),
                ('eggs_freq', models.IntegerField(blank=True, null=True, verbose_name='If yes, please indicate how many times this child has had eggs in the last week')),
                ('yogurt', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Since this time yesterday, has this child had any yogurt?')),
                ('yogurt_freq', models.IntegerField(blank=True, null=True, verbose_name='If yes, please indicate how many times this child has had yogurt in the last week')),
                ('cheese', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name='Since this time yesterday, has this child had any cheese?')),
                ('cheese_freq', models.IntegerField(blank=True, null=True, verbose_name='If yes, please indicate how many times this child has had cheese in the last week')),
                ('rations', models.CharField(choices=[('Yes', 'Yes'), ('No', 'No'), ('Unknown', 'Unknown')], max_length=15, verbose_name="At this child's last visit to this clinic for growth evaluation, did this child receive any ration?")),
                ('infant_visit', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantVisit')),
                ('rations_receviced', models.ManyToManyField(to='td_list.Rations', verbose_name='If yes, please indicate all applicable rations received at the last visit')),
                ('solid_foods', models.ManyToManyField(max_length=15, to='td_list.Foods', verbose_name='For infants and children who are taking solid foods, what foods is your infant/child taking (choose all that apply.)')),
            ],
            options={
                'verbose_name': 'Infant Solid Food Assessment',
                'verbose_name_plural': 'Infant Solid Food Assessment',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, edc_offstudy.model_mixins.OffStudyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='VaccinesMissed',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('missed_vaccine_name', models.CharField(blank=True, choices=[('Vitamin_A', 'Vitamin A'), ('BCG', 'BCG'), ('Hepatitis_B', 'Hepatitis B'), ('DPT', 'DPT (Diphtheria, Pertussis and Tetanus)'), ('Haemophilus_influenza', 'Haemophilus Influenza B Vaccine'), ('PCV_Vaccine', 'PCV Vaccine (Pneumonia Conjugated Vaccine)'), ('Polio', 'Polio'), ('Rotavirus', 'Rotavirus'), ('Measles', 'Measles'), ('Pentavalent', 'Pentavalent Vaccine (Contains DPT, Hepatitis B and Haemophilus Influenza B Vaccine)')], max_length=100, null=True, verbose_name='Missed vaccine name')),
                ('reason_missed', models.CharField(blank=True, choices=[('missed scheduled vaccination', 'Mother or Caregiver has not yet taken infant to clinic for this scheduled vaccination'), ('caregiver declines vaccination', 'Mother or Caregiver declines this vaccicnation'), ('no stock', 'Stock out at clinic'), ('OTHER', 'Other, specify')], max_length=100, null=True, verbose_name='Reasons infant missed vaccines')),
                ('reason_missed_other', edc_base.model.fields.custom_fields.OtherCharField(blank=True, editable=True, verbose_name='...if "Other", specify')),
                ('infant_fu_immunizations', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantFuImmunizations')),
            ],
            options={
                'verbose_name': 'Missed Vaccines',
                'verbose_name_plural': 'Missed Vaccines',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.CreateModel(
            name='VaccinesReceived',
            fields=[
                ('created', django_extensions.db.fields.CreationDateTimeField(auto_now_add=True, verbose_name='created')),
                ('modified', django_extensions.db.fields.ModificationDateTimeField(auto_now=True, verbose_name='modified')),
                ('user_created', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user created')),
                ('user_modified', edc_base.model.fields.userfield.UserField(editable=False, max_length=50, verbose_name='user modified')),
                ('hostname_created', models.CharField(default='leslie', editable=False, help_text='System field. (modified on create only)', max_length=50)),
                ('hostname_modified', edc_base.model.fields.hostname_modification_field.HostnameModificationField(editable=False, help_text='System field. (modified on every save)', max_length=50)),
                ('revision', django_revision.revision_field.RevisionField(blank=True, editable=False, help_text='System field. Git repository tag:branch:commit.', max_length=75, null=True, verbose_name='Revision')),
                ('id', edc_base.model.fields.uuid_auto_field.UUIDAutoField(blank=True, editable=False, help_text='System auto field. UUID primary key.', primary_key=True, serialize=False)),
                ('received_vaccine_name', models.CharField(blank=True, choices=[('Vitamin_A', 'Vitamin A'), ('BCG', 'BCG'), ('Hepatitis_B', 'Hepatitis B'), ('DPT', 'DPT (Diphtheria, Pertussis and Tetanus)'), ('Haemophilus_influenza', 'Haemophilus Influenza B Vaccine'), ('PCV_Vaccine', 'PCV Vaccine (Pneumonia Conjugated Vaccine)'), ('Polio', 'Polio'), ('Rotavirus', 'Rotavirus'), ('Measles', 'Measles'), ('Pentavalent', 'Pentavalent Vaccine (Contains DPT, Hepatitis B and Haemophilus Influenza B Vaccine)')], max_length=100, null=True, verbose_name='Received vaccine name')),
                ('date_given', models.DateField(blank=True, null=True, validators=[edc_base.model.validators.date.date_not_future], verbose_name='Date Given')),
                ('infant_age', models.CharField(blank=True, choices=[('At Birth', 'At Birth'), ('After Birth', 'After Birth'), ('2', '2 months'), ('3', '3 months'), ('4', '4 months'), ('6-11', '6-11 months'), ('9', '9 months'), ('12-17', '12-17 months'), ('18', '18 months'), ('18-29', '18-29 months'), ('24-29', '24-29 months'), ('30-35', '30-35 months'), ('36-41', '36-41 months'), ('42-47', '42-47 months'), ('48-53', '48-53 months'), ('54-59', '54-59 months')], max_length=35, null=True, verbose_name='Infant age when vaccine given')),
                ('infant_fu_immunizations', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantFuImmunizations')),
            ],
            options={
                'verbose_name': 'Received Vaccines',
                'verbose_name_plural': 'Received Vaccines',
            },
            bases=(edc_sync.models.sync_model_mixin.SyncMixin, models.Model),
        ),
        migrations.AddField(
            model_name='infantoffstudy',
            name='infant_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantVisit'),
        ),
        migrations.AddField(
            model_name='infantfuphysical',
            name='infant_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantVisit'),
        ),
        migrations.AddField(
            model_name='infantfunewmed',
            name='infant_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantVisit'),
        ),
        migrations.AddField(
            model_name='infantfuimmunizations',
            name='infant_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantVisit'),
        ),
        migrations.AddField(
            model_name='infantfudx',
            name='infant_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantVisit'),
        ),
        migrations.AddField(
            model_name='infantfu',
            name='infant_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantVisit'),
        ),
        migrations.AddField(
            model_name='infantfeeding',
            name='infant_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantVisit'),
        ),
        migrations.AddField(
            model_name='infantdeathreport',
            name='infant_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantVisit'),
        ),
        migrations.AddField(
            model_name='infantdeathreport',
            name='medical_responsibility',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='edc_death_report.MedicalResponsibility', verbose_name='Who was responsible for primary medical care of the participant during the month prior to death?'),
        ),
        migrations.AddField(
            model_name='infantdeathreport',
            name='reason_hospitalized',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='edc_death_report.ReasonHospitalized', verbose_name='if yes, hospitalized, what was the primary reason for hospitalisation? '),
        ),
        migrations.AddField(
            model_name='infantdeathreport',
            name='registered_subject',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_registration.RegisteredSubject'),
        ),
        migrations.AddField(
            model_name='infantcongenitalanomalies',
            name='infant_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantVisit'),
        ),
        migrations.AddField(
            model_name='infantcns',
            name='congenital_anomalies',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantCongenitalAnomalies'),
        ),
        migrations.AddField(
            model_name='infantcleftdisorder',
            name='congenital_anomalies',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantCongenitalAnomalies'),
        ),
        migrations.AddField(
            model_name='infantcardiodisorder',
            name='congenital_anomalies',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantCongenitalAnomalies'),
        ),
        migrations.AddField(
            model_name='infantbirthfeedingvaccine',
            name='infant_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantVisit'),
        ),
        migrations.AddField(
            model_name='infantbirthexam',
            name='infant_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantVisit'),
        ),
        migrations.AddField(
            model_name='infantbirthdata',
            name='infant_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantVisit'),
        ),
        migrations.AddField(
            model_name='infantbirtharv',
            name='infant_visit',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='td_infant.InfantVisit'),
        ),
    ]
